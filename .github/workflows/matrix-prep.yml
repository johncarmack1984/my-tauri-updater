name: job matrix prep
on:
  workflow_call:
    outputs:
      version:
        value: ${{ jobs.matrix-prep.outputs.version }}
        description: "The version of the application."
      msi-version:
        value: ${{ jobs.matrix-prep.outputs.msi-version }}
        description: "The version of the application."
      release-channel:
        value: ${{ jobs.matrix-prep.outputs.release-channel }}
        description: "The version of the application."
      release-type:
        value: ${{ jobs.matrix-prep.outputs.release-type }}
        description: "The version of the application."

      matrix:
        description: "Matrix for publish jobs"
        value: ${{ jobs.matrix-prep.outputs.matrix }}

jobs:
  matrix-prep:
    runs-on: "ubuntu-latest"

    outputs:
      version: ${{ steps.get-version.outputs.version }}
      msi-version: ${{ steps.get-msi-version.outputs.msi-version }}
      release-channel: ${{ steps.get-release-channel.outputs.release-channel }}
      release-type: ${{ steps.get-release-type.outputs.release-type }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - uses: pnpm/action-setup@v4
        with:
          version: 10.x.x
      - run: pnpm i --frozen-lockfile
      - run: pnpm build:scripts

      - id: get-version
        run: |
          VERSION=$(node .dist/print-version.mjs)
          echo "version=$(echo $VERSION | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

      - id: get-msi-version
        run: |
          MSI_VERSION=$(node .dist/print-msi-version.mjs)
          echo "msi-version=$MSI_VERSION" >> $GITHUB_OUTPUT

      - id: get-release-channel
        run: |
          RELEASE_CHANNEL=$(node .dist/print-release-channel.mjs)
          echo "release-channel=$RELEASE_CHANNEL" >> $GITHUB_OUTPUT

      - id: get-release-type
        run: |
          RELEASE_TYPE=$(npx covector status | grep 'app:' | sed 's/app://' | xargs | cut -d ' ' -f1)
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

      - id: set-matrix
        run: |
          if [ "$RELEASE_CHANNEL" = "stable" ]; then
            matrixFile="./.github/fixtures/matrix_publish_stable.json"
          else
            matrixFile="./.github/fixtures/matrix_publish.json"
          fi
            matrix=$(jq '.' $matrixFile)
            echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
          env:
            RELEASE_CHANNEL: ${{ steps.get-release-channel.outputs.release-channel }}
      - name: Print matrix
        run: |
          echo "matrix=$matrix"
          env:
            matrix: ${{ steps.set-matrix.outputs.matrix }}

      - name: "Output: ${{ steps.get-release-channel.outputs.release-channel }} ${{ steps.get-release-type.outputs.release-type }}: ${{ steps.get-version.outputs.version }}"
        env:
          RELEASE_CHANNEL: ${{ steps.get-release-channel.outputs.release-channel }}
          RELEASE_TYPE: ${{ steps.get-release-type.outputs.release-type }}
          CURRENT_VERSION: ${{ steps.get-version.outputs.version }}
          MSI_VERSION: ${{ steps.get-msi-version.outputs.msi-version }}
          BUILD_MATRIX: ${{ steps.set-matrix.outputs.matrix }}
        run: |
          printf "\n\n\n      ✈️      ✈️      ✈️      \n\n"
          printf "\033[1mRelease Channel: \033[33mv${RELEASE_CHANNEL}\033[0m\n"
          printf "\033[1mRelease Type : \033[33m${RELEASE_TYPE}\033[0m\n"
          printf "\033[1mVersion : \033[32mv${CURRENT_VERSION}\033[0m\n"
          printf "\033[1mMSI Version : \033[33m${MSI_VERSION}\033[0m\n"
          printf "\033[1mMatrix : \033[32mv${BUILD_MATRIX}\033[0m\n"
          printf "\n      ✈️      ✈️      ✈️      \n\n\n\n "
