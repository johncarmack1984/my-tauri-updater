name: covector version or publish

on:
  workflow_call:
    outputs:
      release-id:
        description: The ID of the created release.
        value: ${{ jobs.version-or-publish.outputs.release-id }}
      matrix:
        description: "Matrix for publish jobs"
        value: ${{ jobs.version-or-publish.outputs.matrix }}
      command-ran:
        description: "The command that was run by covector"
        value: ${{ jobs.version-or-publish.outputs.command-ran }}
      packages-published:
        description: "List of packages that were published"
        value: ${{ jobs.version-or-publish.outputs.packages-published }}

env:
  SCCACHE_GHA_ENABLED: true
  RUSTC_WRAPPER: "sccache"
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

permissions:
  id-token: write
  contents: write
  pull-requests: write
  issues: write

jobs:
  version-or-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 65
    outputs:
      release-id: ${{ steps.covector.outputs.releaseId }}
      matrix: ${{ steps.set-build-matrix.outputs.result }}
      packages-published: ${{ steps.get-packages-published.outputs.result }}
      change: ${{ steps.covector.outputs.change }}
      command-ran: ${{ steps.covector.outputs.commandRan }}
      successfulPublish: ${{ steps.covector.outputs.successfulPublish }}

    steps:
      - uses: mozilla-actions/sccache-action@v0.0.9
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: install dependencies (ubuntu only)
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libwebkit2gtk-4.1-dev build-essential librsvg2-dev patchelf webkit2gtk-driver zstd xvfb curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev  libsoup-3.0-dev libgdal-dev libclang-dev # libappindicator3-dev
          version: 1.0

      - name: git config
        run: |
          git config --global user.name "${{ github.event.pusher.name }}"
          git config --global user.email "${{ github.event.pusher.email }}"

      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - run: pnpm i --frozen-lockfile

      - id: install-rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: swatinem/rust-cache@v2

        with:
          key: ${{ steps.install-rust.outputs.cachekey }}
          cache-all-crates: true
          cache-on-failure: true
          workspaces: |
            src-tauri

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_GITHUB_CI_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_GITHUB_CI_SECRET }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: covector version or publish (publish when no change files present)
        uses: jbolda/covector/packages/action@covector-v0.12
        id: covector
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          command: "version-or-publish"
          createRelease: true
          draftRelease: true
          recognizeContributors: true

      - name: get packages published
        if: steps.covector.outputs.commandRan == 'publish'
        id: get-packages-published
        uses: actions/github-script@v7
        env:
          PACKAGES: ${{ steps.covector.outputs.packagesPublished }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: json
          script: |
            const script = require('./.scripts/get-packages-published.cjs');
            return await script({github, context});

      - name: set build matrix
        if: steps.covector.outputs.commandRan == 'publish'
        id: set-build-matrix
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: json
          script: |
            const script = require('./.scripts/get-build-matrix.cjs');
            return await script({github, context});

      - run: pnpm i --lockfile-only
        if: steps.covector.outputs.commandRan == 'version'
      - run: cargo tree --depth 0
        working-directory: src-tauri
        if: steps.covector.outputs.commandRan == 'version'

      - name: Create Pull Request With Versions Bumped
        id: cpr
        uses: peter-evans/create-pull-request@v7
        if: steps.covector.outputs.commandRan == 'version'
        with:
          title: "Publish New Versions"
          commit-message: "publish new versions"
          sign-commits: true
          labels: "version updates"
          branch: "release"
          body: ${{ steps.covector.outputs.change }}
