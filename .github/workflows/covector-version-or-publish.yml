name: covector version or publish

on:
  workflow_call:
    outputs:
      release-id:
        description: The ID of the created release.
        value: ${{ jobs.version-or-publish.outputs.releaseId }}
      command-ran:
        description: The command that was run by covector.
        value: ${{ jobs.version-or-publish.outputs.commandRan }}
      version:
        value: ${{ jobs.version-or-publish.outputs.version }}
        description: "The version of the application."
      msi-version:
        value: ${{ jobs.version-or-publish.outputs.msi-version }}
        description: "The version of the application."
      release-channel:
        value: ${{ jobs.version-or-publish.outputs.release-channel }}
        description: "The version of the application."
      release-type:
        value: ${{ jobs.version-or-publish.outputs.release-type }}
        description: "The version of the application."

      matrix:
        description: "Matrix for publish jobs"
        value: ${{ jobs.version-or-publish.outputs.matrix }}

permissions:
  # required for npm provenance
  id-token: write
  # required to create the GitHub Release
  contents: write
  # required for creating the Version Packages Release
  pull-requests: write
  issues: write

jobs:
  version-or-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 65
    outputs:
      change: ${{ steps.covector.outputs.change }}
      commandRan: ${{ steps.covector.outputs.commandRan }}
      successfulPublish: ${{ steps.covector.outputs.successfulPublish }}
      releaseId: ${{ steps.covector.outputs.releaseId }}
      packagesPublished: ${{ steps.covector.outputs.packagesPublished }}
      releaseUploadUrl: ${{ steps.covector.outputs.releaseUploadUrl }}
      releaseUrl: ${{ steps.covector.outputs.releaseUrl }}
      status: ${{ steps.covector.outputs.status }}
      templatePipe: ${{ steps.covector.outputs.templatePipe }}
      version: ${{ steps.get-version.outputs.version }}
      msi-version: ${{ steps.get-msi-version.outputs.msi-version }}
      release-channel: ${{ steps.get-release-channel.outputs.release-channel }}
      release-type: ${{ steps.get-release-type.outputs.release-type }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for use of git history

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - uses: pnpm/action-setup@v4
        with:
          version: 10.x.x
      - run: pnpm i --frozen-lockfile
      - run: pnpm build:scripts
      - id: get-release-type
        run: |
          RELEASE_TYPE=$(node .dist/print-release-type.mjs)
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_GITHUB_CI_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_GITHUB_CI_SECRET }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: covector version or publish (publish when no change files present)
        uses: jbolda/covector/packages/action@covector-v0.12
        id: covector
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          command: "version-or-publish"
          createRelease: true
          draftRelease: true
          recognizeContributors: true

      - name: Create Pull Request With Versions Bumped
        id: cpr
        uses: peter-evans/create-pull-request@v6
        if: steps.covector.outputs.commandRan == 'version'
        with:
          title: "Publish New Versions"
          commit-message: "publish new versions"
          labels: "version updates"
          branch: "release"
          body: ${{ steps.covector.outputs.change }}

      - run: pnpm build:scripts

      - id: get-version
        run: |
          VERSION=$(node .dist/print-version.mjs)
          echo "version=$(echo $VERSION | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

      - id: get-msi-version
        run: |
          MSI_VERSION=$(node .dist/print-msi-version.mjs)
          echo "msi-version=$MSI_VERSION" >> $GITHUB_OUTPUT

      - id: get-release-channel
        run: |
          RELEASE_CHANNEL=$(node .dist/print-release-channel.mjs)
          echo "release-channel=$RELEASE_CHANNEL" >> $GITHUB_OUTPUT

      - id: set-matrix
        run: |
          if [ "$RELEASE_CHANNEL" = "stable" ]; then
            matrixFile="./.github/fixtures/matrix_publish_stable.json"
          else
            matrixFile="./.github/fixtures/matrix_publish.json"
          fi
            matrix=$(jq '.' $matrixFile)
            echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
        env:
          RELEASE_CHANNEL: ${{ steps.get-release-channel.outputs.release-channel }}
      - name: Print matrix
        run: |
          echo "matrix=$matrix"
        env:
          matrix: ${{ steps.set-matrix.outputs.matrix }}

      - name: "Output: ${{ steps.get-release-channel.outputs.release-channel }} ${{ steps.get-release-type.outputs.release-type }}: ${{ steps.get-version.outputs.version }}"
        env:
          RELEASE_CHANNEL: ${{ steps.get-release-channel.outputs.release-channel }}
          RELEASE_TYPE: ${{ steps.get-release-type.outputs.release-type }}
          CURRENT_VERSION: ${{ steps.get-version.outputs.version }}
          MSI_VERSION: ${{ steps.get-msi-version.outputs.msi-version }}
          BUILD_MATRIX: ${{ steps.set-matrix.outputs.matrix }}
        run: |
          printf "\n\n\n      ✈️      ✈️      ✈️      \n\n"
          printf "\033[1mRelease Channel: \033[33mv${RELEASE_CHANNEL}\033[0m\n"
          printf "\033[1mRelease Type : \033[33m${RELEASE_TYPE}\033[0m\n"
          printf "\033[1mVersion : \033[32mv${CURRENT_VERSION}\033[0m\n"
          printf "\033[1mMSI Version : \033[33m${MSI_VERSION}\033[0m\n"
          printf "\033[1mMatrix : \033[32mv${BUILD_MATRIX}\033[0m\n"
          printf "\n      ✈️      ✈️      ✈️      \n\n\n\n "
