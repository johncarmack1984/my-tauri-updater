name: "publish"
on:
  workflow_call:
    inputs:
      releaseId:
        required: true
        type: string

jobs:
  matrix_prep:
    uses: ./.github/workflows/matrix-prep.yml
    with:
      releaseId: ${{ inputs.releaseId }}
  publish-tauri:
    needs: matrix_prep
    name: "${{ matrix.platform }} ${{ matrix.args }}"
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}

    env:
      SCCACHE_GHA_ENABLED: ${{ matrix.platform != 'windows-11-arm' && 'true' ||  'false' }}
      RUSTC_WRAPPER: ${{ matrix.platform != 'windows-11-arm' && 'sccache' ||  null }}
      CARGO_TERM_COLOR: always
      CARGO_INCREMENTAL: 0
      release-channel: "stable"

    outputs:
      release-id: ${{ steps.build.outputs.releaseId }}
      release-html-url: ${{ steps.build.outputs.releaseHtmlUrl }}
      release-upload-url: ${{ steps.build.outputs.releaseUploadUrl }}
      artifact-paths: "${{ steps.build.outputs.artifactPaths }}"
      app-version: ${{ steps.build.outputs.appVersion }}

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: mozilla-actions/sccache-action@v0.0.9
        # disable on msvc due to a temporary limitation, see: https://github.com/Mozilla-Actions/sccache-action/issues/189
        if: matrix.platform != 'windows-11-arm'
        continue-on-error: true
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform == 'windows-11-arm' && 'aarch64-pc-windows-msvc' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'ubuntu-24.04-arm'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libwebkit2gtk-4.1-dev build-essential librsvg2-dev patchelf webkit2gtk-driver zstd xvfb curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev # libappindicator3-dev
          version: 1.0

      - name: install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.

      - uses: swatinem/rust-cache@v2
      - run: cargo fetch
        working-directory: src-tauri
      - name: Get MSI Version
        if: matrix.platform == 'windows-latest'
        id: get-msi-version
        run: |
          npm run build:scripts
          VERSION_JSON=$(node .dist/current-msi-version.js | jq)
          echo "msi-version=$(echo $VERSION_JSON | jq -r .version)" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Windows MSI Version
        if: matrix.platform == 'windows-latest'
        run: node .dist/set-version.js ${{ steps.get-msi-version.outputs.msi-version }}

      - uses: tauri-apps/tauri-action@v0
        id: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ inputs.releaseId }}
          tagName: "app-v__VERSION__"
          releaseName: "App v__VERSION__"
          prerelease: false
          releaseDraft: true
          includeDebug: true
          includeRelease: true
          includeUpdaterJson: true
          args: ${{ matrix.args }}
      - name: Output Summary
        env:
          RELEASE_ID: ${{ steps.build.outputs.releaseId }}
          RELEASE_HTML_URL: ${{ steps.build.outputs.releaseHtmlUrl }}
          RELEASE_UPLOAD_URL: ${{ steps.build.outputs.releaseUploadUrl }}
          ARTIFACT_PATHS: "${{ steps.build.outputs.artifactPaths }}"
          APP_VERSION: ${{ steps.build.outputs.appVersion }}

        run: |
          printf "\n\n\n            ✈️      ✈️      \n\n"
          printf "\033[1mRelease Id : \033[32m${RELEASE_ID}\033[0m\n"
          printf "\033[1mRelease Html Url : \033[32m${RELEASE_HTML_URL}\033[0m\n"
          printf "\033[1mRelease Upload Url : \033[32m${RELEASE_UPLOAD_URL}\033[0m\n"
          printf "\033[1mArtifact Paths : \033[32m${ARTIFACT_PATHS}\033[0m\n"
          printf "\033[1mApp version : \033[32m${APP_VERSION}\033[0m\n"
          printf "\n      ✈️      ✈️      ✈️      \n\n\n\n "
  push-to-s3:
    name: "Push to S3"
    needs: [publish-tauri]
    uses: ./.github/workflows/push-to-s3.yml
    secrets: inherit

    with:
      release-id: ${{ needs.publish-tauri.outputs.release-id }}
      app-version: ${{ needs.publish-tauri.outputs.app-version }}
      package-name: "app"
      bucket-name: "my-tauri-updater"
