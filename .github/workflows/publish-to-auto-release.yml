name: "publish"
on:
  workflow_call:
    inputs:
      releaseChannel:
        default: "stable"
        type: string
      releaseId:
        required: true
        type: string
      releaseUploadUrl:
        required: true
        type: string
      releaseUrl:
        required: true
        type: string
      packagesPublished:
        required: true
        type: string
      status:
        required: true
        type: string
      templatePipe:
        required: true
        type: string
      change:
        required: true
        type: string
      commandRan:
        required: true
        type: string
      successfulPublish:
        required: true
        type: string

jobs:
  matrix_prep:
    runs-on: "ubuntu-latest"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - id: set-matrix
        run: |
          if [ "$RELEASE_CHANNEL" = "stable" ]; then
            matrixFile="./.github/fixtures/matrix_release_stable.json"
          else
            matrixFile="./.github/fixtures/matrix_release.json"
          fi
          matrix=$(jq '.' $matrixFile)
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
        env:
          RELEASE_CHANNEL: ${{ inputs.releaseChannel }}
      - name: Print matrix
        run: |
          echo "matrix=$matrix"
        env:
          matrix: ${{ steps.set-matrix.outputs.matrix }}

  publish-tauri:
    name: "${{ matrix.platform }} ${{ matrix.args }}"
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: ubuntu-latest
            args: ""
          - platform: ubuntu-24.04-arm
            args: ""
          - platform: "windows-latest"
            args: ""
          - platform: windows-11-arm
            args: "--target aarch64-pc-windows-msvc"

    env:
      SCCACHE_GHA_ENABLED: ${{ matrix.platform != 'windows-11-arm' && 'true' ||  'false' }}
      RUSTC_WRAPPER: ${{ matrix.platform != 'windows-11-arm' && 'sccache' ||  null }}
      CARGO_TERM_COLOR: always
      CARGO_INCREMENTAL: 0
      release-channel: "stable"

    outputs:
      release-id: ${{ steps.build.outputs.releaseId }}
      release-html-url: ${{ steps.build.outputs.releaseHtmlUrl }}
      release-upload-url: ${{ steps.build.outputs.releaseUploadUrl }}
      artifact-paths: "${{ steps.build.outputs.artifactPaths }}"
      app-version: ${{ steps.build.outputs.appVersion }}

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: mozilla-actions/sccache-action@v0.0.9
        # disable on msvc due to a temporary limitation, see: https://github.com/Mozilla-Actions/sccache-action/issues/189
        if: matrix.platform != 'windows-11-arm'
        continue-on-error: true
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform == 'windows-11-arm' && 'aarch64-pc-windows-msvc' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'ubuntu-24.04-arm'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libwebkit2gtk-4.1-dev build-essential librsvg2-dev patchelf webkit2gtk-driver zstd xvfb curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev # libappindicator3-dev
          version: 1.0

      - name: install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.

      - uses: swatinem/rust-cache@v2
      - run: cargo fetch
        working-directory: src-tauri

      - uses: tauri-apps/tauri-action@v0
        id: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ inputs.releaseId }}
          prerelease: false
          releaseDraft: true
          includeDebug: true
          includeRelease: true
          includeUpdaterJson: true
          args: ${{ matrix.args }}
      - name: Output Summary
        env:
          RELEASE_ID: ${{ steps.build.outputs.releaseId }}
          RELEASE_HTML_URL: ${{ steps.build.outputs.releaseHtmlUrl }}
          RELEASE_UPLOAD_URL: ${{ steps.build.outputs.releaseUploadUrl }}
          ARTIFACT_PATHS: "${{ steps.build.outputs.artifactPaths }}"
          APP_VERSION: ${{ steps.build.outputs.appVersion }}

        run: |
          printf "\n\n\n            ✈️      ✈️      \n\n"
          printf "\033[1mRelease Id : \033[32m${RELEASE_ID}\033[0m\n"
          printf "\033[1mRelease Html Url : \033[32m${RELEASE_HTML_URL}\033[0m\n"
          printf "\033[1mRelease Upload Url : \033[32m${RELEASE_UPLOAD_URL}\033[0m\n"
          printf "\033[1mArtifact Paths : \033[32m${ARTIFACT_PATHS}\033[0m\n"
          printf "\033[1mApp version : \033[32m${APP_VERSION}\033[0m\n"
          printf "\n      ✈️      ✈️      ✈️      \n\n\n\n "
  push-to-s3:
    name: "Push to S3"
    needs: [publish-tauri]
    permissions:
      contents: write
      pull-requests: write

    runs-on: ubuntu-latest

    env:
      release-id: ${{ needs.publish-tauri.outputs.release-id }}
      release-html-url: ${{ needs.publish-tauri.outputs.release-html-url }}
      release-upload-url: ${{ needs.publish-tauri.outputs.release-upload-url }}
      artifact-paths: ${{ needs.publish-tauri.outputs.artifact-paths }}
      app-version: ${{ needs.publish-tauri.outputs.app-version }}
      repo-owner: ${{ github.repository_owner }}
      repo-name: ${{ github.event.repository.name }}
      package-name: "app"
      bucket-name: "my-tauri-updater"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download release assets
        run: |
          echo "gh release download ${{ env.package-name }}-v${{ env.app-version }} -D release"
          gh release download ${{ env.package-name }}-v${{ env.app-version }} -D release
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Update URLs in latest.json
        run: |
          echo "sed -i 's/github.com\/${{ env.repo-owner }}\/${{ env.repo-name }}\/releases\/download\/${{ env.package-name }}-v${{ env.app-version }}/${{ env.bucket-name }}.s3.${{ vars.AWS_REGION }}.amazonaws.com\/${{ env.package-name }}\/${{ env.app-version }}/g' release/latest.json"
          sed -i 's/github.com\/${{ env.repo-owner }}\/${{ env.repo-name }}\/releases\/download\/${{ env.package-name }}-v${{ env.app-version }}/${{ env.bucket-name }}.s3.${{ vars.AWS_REGION }}.amazonaws.com\/${{ env.package-name }}\/${{ env.app-version }}/g' release/latest.json
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_GITHUB_CI_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_GITHUB_CI_SECRET }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Push Assets to S3
        uses: osiegmar/s3-publisher-action@v1
        with:
          bucket: my-tauri-updater
          dir: release
          prefix: "${{ env.package-name }}/${{ env.app-version }}/"

      - name: Update latest.json in S3
        uses: osiegmar/s3-publisher-action@v1
        if: ${{ needs.publish-tauri.outputs.release-id}}
        with:
          bucket: my-tauri-updater
          dir: release
          includes: "latest.json"
          prefix: "${{ env.package-name }}/"
